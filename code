#this code is entirely done in google colab
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# 1. Load and Preprocess the Dataset
from google.colab import files
uploaded = files.upload()

# Load the dataset (replace with your uploaded file name)
file_path = "spam.csv"
df = pd.read_csv(file_path, encoding='ISO-8859-1')

# Rename columns and keep only the relevant ones
df = df.rename(columns={'v1': 'label', 'v2': 'text'})
df = df[['label', 'text']]

# Encode the labels (ham=0, spam=1)
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# 2. Split the Dataset
X = df['text']  # Features
y = df['label']  # Labels
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# 3. Vectorize the Text Data
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)  # Train vectorized
X_test_vec = vectorizer.transform(X_test)  # Test vectorized

# 4. Train the Model
model = MultinomialNB()
model.fit(X_train_vec, y_train)

# 5. Evaluate the Model
y_pred = model.predict(X_test_vec)
print("Model Evaluation:")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# 6. Real-Time Email Classification
def classify_email(email_text):
    email_vec = vectorizer.transform([email_text])  # Vectorize the input email
    prediction = model.predict(email_vec)  # Predict the label
    return "Spam" if prediction[0] == 1 else "Ham (Normal)"

# 7. Continuous Real-Time Classification
while True:
    user_email = input("\nEnter the email text to classify (or type 'exit' to quit): ")
    if user_email.lower() == 'exit':
        print("Exiting the classifier.")
        break
    result = classify_email(user_email)
    print(f"The email is classified as: {result}")

